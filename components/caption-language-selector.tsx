"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import type { Caption } from "@/lib/youtube-api"

interface CaptionLanguageSelectorProps {
  captions: Caption[]
  selectedCaption: Caption | null
  onCaptionSelect: (caption: Caption) => void
  onProceedToDownload: () => void
  className?: string
}

export function CaptionLanguageSelector({
  captions,
  selectedCaption,
  onCaptionSelect,
  onProceedToDownload,
  className,
}: CaptionLanguageSelectorProps) {
  const [isCompact, setIsCompact] = useState(false)

  const getLanguageDisplayName = (languageCode: string): string => {
    const languageNames: Record<string, string> = {
      en: "English",
      "en-US": "English (US)",
      "en-GB": "English (UK)",
      es: "Spanish",
      "es-ES": "Spanish (Spain)",
      "es-MX": "Spanish (Mexico)",
      fr: "French",
      de: "German",
      it: "Italian",
      pt: "Portuguese",
      "pt-BR": "Portuguese (Brazil)",
      ru: "Russian",
      ja: "Japanese",
      ko: "Korean",
      zh: "Chinese",
      "zh-CN": "Chinese (Simplified)",
      "zh-TW": "Chinese (Traditional)",
      ar: "Arabic",
      hi: "Hindi",
      nl: "Dutch",
      sv: "Swedish",
      no: "Norwegian",
      da: "Danish",
      fi: "Finnish",
      pl: "Polish",
      tr: "Turkish",
      th: "Thai",
      vi: "Vietnamese",
    }

    return languageNames[languageCode] || languageCode.toUpperCase()
  }

  if (captions.length === 0) {
    return null
  }

  return (
    <Card className={className}>
      <CardHeader>
        <CardTitle className="text-lg font-semibold text-foreground flex items-center justify-between">
          Select Caption Language
          <div className="flex items-center gap-2">
            <Badge variant="secondary" className="text-xs">
              {captions.length} available
            </Badge>
            <Button variant="ghost" size="sm" onClick={() => setIsCompact(!isCompact)} className="h-6 w-6 p-0">
              {isCompact ? (
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
                </svg>
              ) : (
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              )}
            </Button>
          </div>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {isCompact ? (
          // Compact dropdown view
          <div className="space-y-3">
            <Select
              value={selectedCaption?.id || ""}
              onValueChange={(value) => {
                const caption = captions.find((c) => c.id === value)
                if (caption) onCaptionSelect(caption)
              }}
            >
              <SelectTrigger>
                <SelectValue placeholder="Select a caption language" />
              </SelectTrigger>
              <SelectContent>
                {captions.map((caption) => (
                  <SelectItem key={caption.id} value={caption.id}>
                    <div className="flex items-center justify-between w-full">
                      <span>{getLanguageDisplayName(caption.language)}</span>
                      <div className="flex items-center gap-1 ml-2">
                        {caption.isAutoGenerated && (
                          <Badge variant="outline" className="text-xs">
                            Auto
                          </Badge>
                        )}
                        <Badge variant="secondary" className="text-xs">
                          {caption.language}
                        </Badge>
                      </div>
                    </div>
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        ) : (
          // Expanded card view
          <div className="grid gap-2 max-h-64 overflow-y-auto">
            {captions.map((caption) => (
              <div
                key={caption.id}
                className={`flex items-center justify-between p-3 rounded-lg border cursor-pointer transition-colors ${
                  selectedCaption?.id === caption.id
                    ? "border-primary bg-primary/5"
                    : "border-border hover:border-primary/50 hover:bg-accent/50"
                }`}
                onClick={() => onCaptionSelect(caption)}
              >
                <div className="flex items-center gap-3">
                  <div
                    className={`w-4 h-4 rounded-full border-2 flex items-center justify-center ${
                      selectedCaption?.id === caption.id ? "border-primary bg-primary" : "border-muted-foreground"
                    }`}
                  >
                    {selectedCaption?.id === caption.id && (
                      <div className="w-2 h-2 rounded-full bg-primary-foreground"></div>
                    )}
                  </div>

                  <div>
                    <div className="font-medium text-foreground">{getLanguageDisplayName(caption.language)}</div>
                    <div className="text-sm text-muted-foreground">{caption.name}</div>
                  </div>
                </div>

                <div className="flex items-center gap-2">
                  {caption.isAutoGenerated && (
                    <Badge variant="outline" className="text-xs">
                      Auto-generated
                    </Badge>
                  )}
                  <Badge variant="secondary" className="text-xs">
                    {caption.language}
                  </Badge>
                </div>
              </div>
            ))}
          </div>
        )}

        {selectedCaption && (
          <div className="space-y-3">
            <div className="p-3 bg-accent/20 rounded-lg border border-accent/30">
              <div className="flex items-center gap-2 text-sm">
                <svg className="w-4 h-4 text-accent" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
                <span className="text-accent-foreground">
                  Selected: <strong>{getLanguageDisplayName(selectedCaption.language)}</strong>
                </span>
              </div>
            </div>

            <Button onClick={onProceedToDownload} className="w-full" size="lg">
              Proceed to Download
              <svg className="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
            </Button>
          </div>
        )}
      </CardContent>
    </Card>
  )
}
